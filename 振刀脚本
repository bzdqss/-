os.execute("cls")
print("脚本加载")
local 武器库 = require("武器库")
local 招式库 = require("招式库")

--[[
表结构:
玩家信息
地址,姓名,招式,出刀,哈希,振刀,是人机,武器,状态,角色,蓄力,队伍,x,y,z,pitch,yaw,roll
本人信息
招式,出刀,哈希,振刀,武器,状态,角色,蓄力,x,y,z,pitch,yaw,roll
matrix

ui
--print(ui.getw(),ui.geth())--宽高
--浮点滑条=ui.SliderFloat("test",浮点滑条,1.0,100.0,"%f",0);
--ui.Spacing()
--整数滑条=ui.SliderInt("测试滑条int",整数滑条,1,100,"%d",0);

Begin("hello")
End()
SetWindowPos(x,y,0)
BeginTabBar("123")
EndTabBar()
BeginTabItem(123)
EndTabItem()
Spacing()
Button()
Checkbox()
勾了=ui.Checkbox("勾我",勾了)
SameLine()
Separator()
Text("hello")
SliderFloat()
浮点滑条=ui.SliderFloat("test",浮点滑条,1.0,100.0,"%f",0);
SliderInt()
整数滑条=ui.SliderInt("测试滑条int",整数滑条,1,100,"%d",0)
DrawLine()
DrawText()
ui.DrawLine(200,300,300,400,1.0,0,0,1,30)
ui.DrawText("测试文本",29,500,600,1,0,0,1)





km
延迟(12)
相对移动(100,20,30)--xy完成时间
左键(1)--1是按下，0是松开
中键(1)
右键(1)
按下(1)--按下键盘键
弹起(1)
滚轮(1)--1是往前1格，-1是往后1格
屏蔽左键(1)--1屏蔽，0解除 使用鼠标松开功能时，必须先屏蔽，才能松开，完成后必须解除，否则鼠标无法使用
屏蔽右键(1)
屏蔽X(1)--1屏蔽，0解除
屏蔽Y(1)
屏蔽滚轮(1)
屏蔽键(65)--屏蔽键盘键，必须键盘插盒子上才能使用，不插无效
解除键(65)
解除所有屏蔽()
是否按下(1)--左键1
--]]

local 对象数量=0;
local 开启振刀=true;
local 矩阵={}
local 玩家={}
local 本人={}
local 玩家状态机 = {}
local 时间=0.0
function getdis(localpos, pos)
    -- 检查输入是否有效
    if not localpos or not pos then
        print("Error: Invalid input positions.")
        return 0
    end

    local temp = {localpos[1] - pos[1], localpos[2] - pos[2], localpos[3] - pos[3]}
    -- 打印调试信息
    --print(temp[1], temp[2], temp[3])

    -- 计算两点间的欧几里得距离
    return math.sqrt(temp[1]*temp[1] + temp[2]*temp[2] + temp[3]*temp[3])
end


function OnDraw()
	--你可以看作是update，每一帧处理一次
	--print("在跑")
	--矩阵=matrix--只可以在这里使用matrix
	if(km.clock()-时间>0.3) then
		时间=km.clock()
		if(km.是否按下(115)) then
			if 开启振刀 then 开启振刀=false else
			开启振刀=true end
		end
	end
	ui.Begin("振刀UI")
	ui.Text("欢迎使用~")
	ui.Text("调缓存到招式库中调整~")
	ui.Text("按F4关闭/开启振刀")
	开启振刀=ui.Checkbox("开启振刀",开启振刀)
end


function rotateyaw(Direction)
    local Yaw = math.atan2(math.abs(Direction.x), math.abs(Direction.y)) * 360 / math.pi
	--print("Yaw",Yaw)
    if ((Direction.x > 0 and Direction.y > 0) or (Direction.x < 0 and Direction.y < 0))==false then
        Yaw = 360 - Yaw
    end
    Yaw = Yaw + 180
    if Yaw > 360 then
        Yaw = Yaw - 360
    end
    return Yaw
end
function CalcYaw(A,B)
    local yaw = math.atan2(A.x - B.x, A.y - B.y) * 180 / math.pi
    if yaw <= 0 then
        yaw = yaw + 360
    end
    return yaw
end

function 判断角度(角度,第一人称坐标,目标坐标)
    local yaw=rotateyaw(角度)
	--print(yaw,角度.x,角度.y)
	local war=CalcYaw(第一人称坐标,目标坐标)
    local phi = math.abs(war - yaw) % 360
    if phi > 180 then 
        return 360 - phi
    end
    return phi
end


function 查询缓存(武器类型,招式名,距离,角度,本人武器类型,是一点零,是蓄转振)
	local 振刀方式=站振 local 执行次数=1 local 执行延迟=0
	local 处理=false
	local 招式描述="未知"
	local 无触发武器=false
	local 缓存=招式库.查找招式(武器类型,招式名)
	if 缓存 then
		--print("缓存没问题,准备进武器响应",缓存,是一点零,是蓄转振,本人武器类型)
		if(招式库.是否无武器响应(缓存,是一点零,是蓄转振,本人武器类型)) then--没有响应的武器
			--print("无响应",缓存,是一点零,是蓄转振,本人武器类型)
			return 处理,振刀方式,执行次数,执行延迟,招式描述
		end
		
		招式描述=缓存.描述
		--print(招式描述)
		if(是蓄转振) then 
			if(距离>缓存.蓄转_最近振刀距离 and 距离<缓存.蓄转_最远振刀距离 and 角度>缓存.蓄转_最小振刀角度 and 角度<缓存.蓄转_最大振刀角度) then
				km.延迟(缓存.蓄转_振刀延迟)
				振刀方式=缓存.蓄转_振刀方式 
				执行次数=缓存.蓄转_执行次数
				执行延迟=缓存.蓄转_执行延迟
				处理=true
			end
		end
		if(是一点零) then
			if(距离>缓存.先进_最近振刀距离 and 距离<缓存.先进_最远振刀距离 and 角度>缓存.先进_最小振刀角度 and 角度<缓存.先进_最大振刀角度) then
				km.延迟(缓存.先进_振刀延迟) 
				振刀方式=缓存.先进_振刀方式
				执行次数=缓存.先进_执行次数
				执行延迟=缓存.先进_执行延迟
				处理=true
			end
		end
		
		if(是蓄转振==false and 是一点零==false) then--站振
			if(距离>缓存.站立_最近振刀距离 and 距离<缓存.站立_最远振刀距离 and 角度>缓存.站立_最小振刀角度 and 角度<缓存.站立_最大振刀角度) then
				km.延迟(缓存.站立_振刀延迟) 
				振刀方式=缓存.站立_振刀方式
				执行次数=缓存.站立_执行次数
				执行延迟=缓存.站立_执行延迟
				处理=true
			end
		end
		--print("振刀事件",是一点零,是蓄转振,本人武器类型,"|",处理,振刀方式,执行次数,执行延迟,招式描述)
		return 处理,振刀方式,执行次数,执行延迟,招式描述
	end
	return 处理,振刀方式,执行次数,执行延迟,招式描述
end

function 振刀功能(武器类型,招式名,距离,角度,本人武器类型,蓄力,状态)
	--print(武器类型,招式名,距离,角度,本人武器类型,蓄力,状态)
	local 振刀方式=0
	local 执行次数=1
	local 执行延迟=0
	local 处理=false
	local 描述=""
	local 是蓄转振=false
	local 是一点零=false
	
	if((状态==20 or 状态==11) and 蓄力<=0.49) then 是蓄转振=true end--是蓄转振
	
	if(蓄力>=0.491 and 状态==20) then 是一点零=true end --进了1.0了
	
	if(武器类型<13) then 
		--print(武器类型,招式名,距离,角度,本人武器类型,是一点零,是蓄转振)
		处理,振刀方式,执行次数,执行延迟,招式描述=查询缓存(武器类型,招式名,距离,角度,本人武器类型,是一点零,是蓄转振)
	end
	return 处理,振刀方式,执行次数,执行延迟,招式描述
end

function OnTick()
	--这是数据回调，当器灵得到游戏数据时,会调用此方法
	--如果要在绘制回调里使用对象信息表,必须存到本地，否则绘制回调不允许访问
	local 当前玩家状态 = {}
	对象数量=#玩家信息
	玩家=玩家信息
	本人=本人信息
	
	if(开启振刀) then
			for index, 对象 in pairs(玩家) do
				local 地址 = 对象.地址
				-- 如果状态机中不存在此玩家，初始化他们的状态
				if not 玩家状态机[地址] then
					玩家状态机[地址] = {
						出刀状态 = 对象.出刀,
						出刀处理 = false
					}
				end
				-- 更新当前玩家状态
				当前玩家状态[地址] = true
				-- 更新和处理状态逻辑
				
				if(本人.状态==31) then return end
				玩家状态机[地址].出刀状态=对象.出刀
				if(玩家状态机[地址].出刀状态~=12 or 本人.状态==31) then
					玩家状态机[地址].出刀处理=false
				end
				if (玩家状态机[地址].出刀处理==false) then
					if(武器库.取武器分类(本人.武器)~=0 and 对象.蓄力>=0.5) then
						local 距离=getdis({本人.x,本人.y,本人.z}, {对象.x,对象.y,对象.z})
						if(对象.出刀==12) then
							--print("start time: ", km.clock())  -- 输出：YYYY-MM-DD HH:MM:SS
							--local 自己朝对象角度=判断角度({x=本人.pitch,y=本人.roll,z=本人.yaw},{x=本人.x,y=本人.z,z=本人.y},{x=对象.x,y=对象.z,z=对象.y})
							local 角度=判断角度({x=对象.pitch,y=对象.roll,z=对象.yaw},{x=对象.x,y=对象.z,z=对象.y},{x=本人.x,y=本人.z,z=本人.y})
							处理,振刀方式,执行次数,执行延迟,招式描述=振刀功能(武器库.取武器分类(对象.武器),对象.招式,距离,角度,武器库.取武器分类(本人.武器),本人.蓄力,本人.状态)
							if 处理 then
								玩家状态机[地址].出刀处理=true
								if(处理) then
									for i=1,执行次数 do
										振刀方式()
										km.延迟(执行延迟)
									end
								print("[振刀事件] 招式"..招式描述.." 距离:"..tostring(距离).." 触发角度"..角度.." 执行延迟"..执行延迟)
								end
							end
						end
					end
				end
			end
		-- 移除已经不存在的玩家
		for 地址 in pairs(玩家状态机) do
			if not 当前玩家状态[地址] then
				玩家状态机[地址] = nil
			end
		end
	end
	
	
end
